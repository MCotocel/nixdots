(defwidget power []
	(box :orientation "v" 
  	    (button :class "power_icon" 
		   	:onclick "~/.bin/rofi-power; sleep 0.2"  "󰐥")))

(defwidget launcher []
	(box :orientation "v" 
  	    (button :class "launcher_icon" 
		   	:onclick "rofi -show drun -display-drun 'App Launcher' -disable-history; sleep 0.2"  "󰍜")))

;; Workspaces Widgets ;;
(deflisten workspaces :initial "[]" "bash ./scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ./scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "bash ./scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :orientation "v"
      (label :text "${workspaces}${current_workspace}" :visible false)
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "")
            )
          )
        )
      )
    )
  )

;; Battery Widgets ;;
(defwidget bat []
	(box	:orientation "v"	
	(label	:class "bat"		
			:text battery	
			:tooltip "Battery: ${battery-cappacity}%")))
(defpoll battery			:interval "1s"	"scripts/battery icon")
(defpoll battery-cappacity	:interval "1s"	"scripts/battery percent")

;; Wifi Widgets ;;
(defwidget wifi []
	(box		:orientation "v"  
				:tooltip wifi-name
	(button		:onclick "scripts/popup wifi" 
				:class "wifi-icon" wifi-icon)))
(defpoll wifi-icon :interval "1s" "scripts/wifi icon")
(defpoll wifi-name :interval "1s" "scripts/wifi name")

;; Volume Widgets ;;
(defwidget volume []
	(box	:orientation "v"	
	(label	:class "volume"		
			:text volume
			:tooltip "Volume: ${volume-level}%")))
(defpoll volume			:interval "0.5s"	"scripts/volume icon")
(defpoll volume-level	:interval "0.5s"	"scripts/volume percent")

;; Control Panel Widgets ;;	
(defwidget control []
	(box :orientation "v" 
		 :space-evenly false  
		 :class "control"
(bat)
(wifi)
(volume)))

;; Clock Widgets ;;
(defwidget time []
	(box	:orientation "v" 
			:class "time" 
			:valign "end"
	(button	:onclick "scripts/popup calendar"	
			:class "time-hour" hour)
	(button	:onclick "scripts/popup calendar"	
			:class "time-min"  min)))
(defpoll hour	:interval "1s"	"date '+%H'")
(defpoll min	:interval "1s"	"date '+%M'")

;; Calendar Widgets ;;
(defwidget cal []
	(box :class "cal-box" 
		 :orientation "v"
	(box :class "cal-inner-box"
	(calendar :class "cal" 
			  :day calendar_day 
			  :month calendar_month 
			  :year calendar_year))))
(defpoll calendar_day :interval "10h"
    "date '+%d'")
(defpoll calendar_month :interval "10h"
    "scripts/calendar")
(defpoll calendar_year :interval "10h"
    "date '+%Y'")

;; Top Widgets ;;
(defwidget top []
	(box	:orientation "v" 
			:valign "start" 
            :class "top"

(power)
(launcher)))

;; Bottom Widgets ;;
(defwidget middle []
	(box	:orientation "v" 
    :class "middle"
(workspaces)))

;; Bottom Widgets ;;
(defwidget bottom []
	(box	:orientation "v"

(time)))

;; End Widgets ;;
(defwidget end []
	(box :orientation "v" 
		 :space-evenly "false" 
		 :valign "end" 
		 :spacing 5
(control)
(bottom)))

;; Bar Widgets ;;
(defwidget bar []
	(box :class "eww_bar" 
		 :orientation "v" 
		 :vexpand "false" 
		 :hexpand "false"
(top)
(middle)
(end)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Window Section's							 ;;	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Bar Windows ;;
(defwindow bar-internal
	:geometry (geometry :x "0"
						:y "0"
                        :anchor "center left"
						:height "100%" 
						:width "50px")
	:monitor 0
    :exclusive true
    :stacking "fg"
(bar))


(defwindow bar-external
	:geometry (geometry :x "0"
						:y "0"
                        :anchor "center left"
						:height "100%" 
						:width "50px")
	:monitor 1
    :exclusive true
    :stacking "fg"
(bar))

;; Calendar Windows ;;
(defwindow calendar
	:geometry (geometry :x "70px" 
						:y "65%" 
						:width "270px" 
						:height "60px")
(cal))
