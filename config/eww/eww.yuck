;; Power menu widget ;;
(defwidget power []
  (box :orientation "v" 
       (button :class "power_icon" :onclick "~/.bin/rofi-power; sleep 0.2"  "󰐥")))

;; Workspace widget ;;
(deflisten workspaces :initial "[]" "bash ./scripts/get-workspaces")
(deflisten current_workspace :initial "1" "bash ./scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "bash ./scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
            (box :orientation "v"
                 (label :text "${workspaces}${current_workspace}" :visible false)
                 (for workspace in workspaces
                      (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
                                (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
                                     (label :text "")))))))

;; Layer widget ;;
(defwidget lay []
  (box :orientation "v"	
	   (label :class "lay" :text layer)))
(defpoll layer :interval "0.2s" "scripts/layer")

;; Battery widget ;;
(defwidget bat []
  (box :orientation "v"	
	   (label :class "bat" :text battery)))
(defpoll battery :interval "1s" "scripts/battery")

;; Wifi widget ;;
(defwidget wifi []
  (box :orientation "v" :class "wifi-icon" wifi-icon))
(defpoll wifi-icon :interval "1s" "scripts/wifi")

;; Volume widget ;;
(defwidget volume []
  (box :orientation "v"	
	   (label :class "volume" :text volume)))
(defpoll volume	:interval "0.2s" "scripts/volume")

;; Control panel widgets ;;	
(defwidget control []
  (box :orientation "v" :space-evenly false :class "control"
       (lay)
       (bat)
       (wifi)
       (volume)))

;; Clock widget ;;
(defwidget time []
  (box :orientation "v" :class "time" :valign "end"
	   (button :class "time-hour" hour)
	   (button :class "time-min"  min)))
(defpoll hour :interval "1s" "date '+%H'")
(defpoll min :interval "1s" "date '+%M'")

;; Top widgets ;;
(defwidget top []
  (box :orientation "v" :valign "start" :class "top"
       (power)))

;; Middle widgets ;;
(defwidget middle []
  (box :orientation "v" :valign "center" :class "middle"
       (workspaces)))

;; End widgets ;;
(defwidget end []
  (box :orientation "v" :space-evenly "false" :valign "end" :spacing 5
       (control)
       (time)))

;; Bar widgets ;;
(defwidget bar []
  (box :class "eww_bar" :orientation "v" :vexpand "false" :hexpand "false"
       (top)
       (middle)
       (end)))

;; Bar windows ;;
(defwindow bar-internal
	:geometry (geometry :x "0":y "0" :anchor "center left" :height "100%" :width "50px")
	:monitor 0
    :exclusive true
    :stacking "fg"
    (bar))

(defwindow bar-external
	:geometry (geometry :x "0" :y "0" :anchor "center left" :height "100%" :width "30px")
	:monitor 1
    :exclusive true
    :stacking "fg"
    (bar))
